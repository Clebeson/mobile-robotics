// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace robot {
class PoseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Pose>
     _instance;
} _Pose_default_instance_;
class VelocityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Velocity>
     _instance;
} _Velocity_default_instance_;
class TelemetryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Telemetry>
     _instance;
} _Telemetry_default_instance_;
class SubscribeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubscribeRequest>
     _instance;
} _SubscribeRequest_default_instance_;

namespace protobuf_robot_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, heading_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, linear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, angular_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, velocity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Pose)},
  { 8, -1, sizeof(Velocity)},
  { 15, -1, sizeof(Telemetry)},
  { 22, -1, sizeof(SubscribeRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Velocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Telemetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubscribeRequest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "robot.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Pose_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Pose_default_instance_);_Velocity_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Velocity_default_instance_);_Telemetry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Telemetry_default_instance_);_SubscribeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubscribeRequest_default_instance_);_Telemetry_default_instance_._instance.get_mutable()->pose_ = const_cast< ::robot::Pose*>(
      ::robot::Pose::internal_default_instance());
  _Telemetry_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::robot::Velocity*>(
      ::robot::Velocity::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013robot.proto\022\005robot\"-\n\004Pose\022\t\n\001x\030\001 \001(\002\022"
      "\t\n\001y\030\002 \001(\002\022\017\n\007heading\030\003 \001(\002\"+\n\010Velocity\022"
      "\016\n\006linear\030\001 \001(\002\022\017\n\007angular\030\002 \001(\002\"I\n\tTele"
      "metry\022\031\n\004pose\030\001 \001(\0132\013.robot.Pose\022!\n\010velo"
      "city\030\002 \001(\0132\017.robot.Velocity\"\022\n\020Subscribe"
      "Request2t\n\007Gateway\0228\n\tSubscribe\022\027.robot."
      "SubscribeRequest\032\020.robot.Telemetry0\001\022/\n\t"
      "Configure\022\020.robot.Telemetry\032\020.robot.Tele"
      "metryb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_robot_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kXFieldNumber;
const int Pose::kYFieldNumber;
const int Pose::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_robot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&x_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:robot.Pose)
}

void Pose::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&x_)) + sizeof(heading_));
  _cached_size_ = 0;
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:robot.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  protobuf_robot_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&x_)) + sizeof(heading_));
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float heading = 3;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float heading = 3;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->heading(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.Pose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float heading = 3;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose

// float x = 1;
void Pose::clear_x() {
  x_ = 0;
}
float Pose::x() const {
  // @@protoc_insertion_point(field_get:robot.Pose.x)
  return x_;
}
void Pose::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:robot.Pose.x)
}

// float y = 2;
void Pose::clear_y() {
  y_ = 0;
}
float Pose::y() const {
  // @@protoc_insertion_point(field_get:robot.Pose.y)
  return y_;
}
void Pose::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:robot.Pose.y)
}

// float heading = 3;
void Pose::clear_heading() {
  heading_ = 0;
}
float Pose::heading() const {
  // @@protoc_insertion_point(field_get:robot.Pose.heading)
  return heading_;
}
void Pose::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:robot.Pose.heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Velocity::kLinearFieldNumber;
const int Velocity::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Velocity::Velocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_robot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot.Velocity)
}
Velocity::Velocity(const Velocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&linear_, &from.linear_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
  // @@protoc_insertion_point(copy_constructor:robot.Velocity)
}

void Velocity::SharedCtor() {
  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
  _cached_size_ = 0;
}

Velocity::~Velocity() {
  // @@protoc_insertion_point(destructor:robot.Velocity)
  SharedDtor();
}

void Velocity::SharedDtor() {
}

void Velocity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Velocity::descriptor() {
  protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Velocity& Velocity::default_instance() {
  protobuf_robot_2eproto::InitDefaults();
  return *internal_default_instance();
}

Velocity* Velocity::New(::google::protobuf::Arena* arena) const {
  Velocity* n = new Velocity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.Velocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
  _internal_metadata_.Clear();
}

bool Velocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot.Velocity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float linear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot.Velocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot.Velocity)
  return false;
#undef DO_
}

void Velocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot.Velocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float linear = 1;
  if (this->linear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->linear(), output);
  }

  // float angular = 2;
  if (this->angular() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angular(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot.Velocity)
}

::google::protobuf::uint8* Velocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot.Velocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float linear = 1;
  if (this->linear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->linear(), target);
  }

  // float angular = 2;
  if (this->angular() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angular(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.Velocity)
  return target;
}

size_t Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.Velocity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float linear = 1;
  if (this->linear() != 0) {
    total_size += 1 + 4;
  }

  // float angular = 2;
  if (this->angular() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Velocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const Velocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Velocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot.Velocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot.Velocity)
    MergeFrom(*source);
  }
}

void Velocity::MergeFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.linear() != 0) {
    set_linear(from.linear());
  }
  if (from.angular() != 0) {
    set_angular(from.angular());
  }
}

void Velocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity::CopyFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity::IsInitialized() const {
  return true;
}

void Velocity::Swap(Velocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Velocity::InternalSwap(Velocity* other) {
  using std::swap;
  swap(linear_, other->linear_);
  swap(angular_, other->angular_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Velocity::GetMetadata() const {
  protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Velocity

// float linear = 1;
void Velocity::clear_linear() {
  linear_ = 0;
}
float Velocity::linear() const {
  // @@protoc_insertion_point(field_get:robot.Velocity.linear)
  return linear_;
}
void Velocity::set_linear(float value) {
  
  linear_ = value;
  // @@protoc_insertion_point(field_set:robot.Velocity.linear)
}

// float angular = 2;
void Velocity::clear_angular() {
  angular_ = 0;
}
float Velocity::angular() const {
  // @@protoc_insertion_point(field_get:robot.Velocity.angular)
  return angular_;
}
void Velocity::set_angular(float value) {
  
  angular_ = value;
  // @@protoc_insertion_point(field_set:robot.Velocity.angular)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Telemetry::kPoseFieldNumber;
const int Telemetry::kVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Telemetry::Telemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_robot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot.Telemetry)
}
Telemetry::Telemetry(const Telemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::robot::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::robot::Velocity(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:robot.Telemetry)
}

void Telemetry::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(velocity_));
  _cached_size_ = 0;
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:robot.Telemetry)
  SharedDtor();
}

void Telemetry::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
}

void Telemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry::descriptor() {
  protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Telemetry& Telemetry::default_instance() {
  protobuf_robot_2eproto::InitDefaults();
  return *internal_default_instance();
}

Telemetry* Telemetry::New(::google::protobuf::Arena* arena) const {
  Telemetry* n = new Telemetry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  _internal_metadata_.Clear();
}

bool Telemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot.Telemetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .robot.Pose pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .robot.Velocity velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot.Telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot.Telemetry)
  return false;
#undef DO_
}

void Telemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot.Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .robot.Pose pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  // .robot.Velocity velocity = 2;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->velocity_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot.Telemetry)
}

::google::protobuf::uint8* Telemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot.Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .robot.Pose pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_, deterministic, target);
  }

  // .robot.Velocity velocity = 2;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->velocity_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.Telemetry)
  return target;
}

size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.Telemetry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .robot.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // .robot.Velocity velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const Telemetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Telemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot.Telemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot.Telemetry)
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::robot::Pose::MergeFrom(from.pose());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::robot::Velocity::MergeFrom(from.velocity());
  }
}

void Telemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  return true;
}

void Telemetry::Swap(Telemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Telemetry::InternalSwap(Telemetry* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(velocity_, other->velocity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Telemetry::GetMetadata() const {
  protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Telemetry

// .robot.Pose pose = 1;
bool Telemetry::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void Telemetry::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::robot::Pose& Telemetry::pose() const {
  const ::robot::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:robot.Telemetry.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::robot::Pose*>(
      &::robot::_Pose_default_instance_);
}
::robot::Pose* Telemetry::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::robot::Pose;
  }
  // @@protoc_insertion_point(field_mutable:robot.Telemetry.pose)
  return pose_;
}
::robot::Pose* Telemetry::release_pose() {
  // @@protoc_insertion_point(field_release:robot.Telemetry.pose)
  
  ::robot::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Telemetry::set_allocated_pose(::robot::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot.Telemetry.pose)
}

// .robot.Velocity velocity = 2;
bool Telemetry::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
void Telemetry::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
}
const ::robot::Velocity& Telemetry::velocity() const {
  const ::robot::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:robot.Telemetry.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::robot::Velocity*>(
      &::robot::_Velocity_default_instance_);
}
::robot::Velocity* Telemetry::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::robot::Velocity;
  }
  // @@protoc_insertion_point(field_mutable:robot.Telemetry.velocity)
  return velocity_;
}
::robot::Velocity* Telemetry::release_velocity() {
  // @@protoc_insertion_point(field_release:robot.Telemetry.velocity)
  
  ::robot::Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void Telemetry::set_allocated_velocity(::robot::Velocity* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot.Telemetry.velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_robot_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:robot.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:robot.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  protobuf_robot_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubscribeRequest* SubscribeRequest::New(::google::protobuf::Arena* arena) const {
  SubscribeRequest* n = new SubscribeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.SubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot.SubscribeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:robot.SubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot.SubscribeRequest)
  return false;
#undef DO_
}

void SubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot.SubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot.SubscribeRequest)
}

::google::protobuf::uint8* SubscribeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot.SubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.SubscribeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot.SubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_robot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_robot_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace robot

// @@protoc_insertion_point(global_scope)
