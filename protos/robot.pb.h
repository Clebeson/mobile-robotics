// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#ifndef PROTOBUF_robot_2eproto__INCLUDED
#define PROTOBUF_robot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace robot {
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class SubscribeRequest;
class SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class Telemetry;
class TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
class Velocity;
class VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
}  // namespace robot

namespace robot {

namespace protobuf_robot_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_robot_2eproto

// ===================================================================

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Pose* other);
  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const PROTOBUF_FINAL { return New(NULL); }

  Pose* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float heading = 3;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  float heading() const;
  void set_heading(float value);

  // @@protoc_insertion_point(class_scope:robot.Pose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float heading_;
  mutable int _cached_size_;
  friend struct protobuf_robot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Velocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot.Velocity) */ {
 public:
  Velocity();
  virtual ~Velocity();

  Velocity(const Velocity& from);

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Velocity& default_instance();

  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Velocity* other);
  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const PROTOBUF_FINAL { return New(NULL); }

  Velocity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Velocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float linear = 1;
  void clear_linear();
  static const int kLinearFieldNumber = 1;
  float linear() const;
  void set_linear(float value);

  // float angular = 2;
  void clear_angular();
  static const int kAngularFieldNumber = 2;
  float angular() const;
  void set_angular(float value);

  // @@protoc_insertion_point(class_scope:robot.Velocity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float linear_;
  float angular_;
  mutable int _cached_size_;
  friend struct protobuf_robot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Telemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot.Telemetry) */ {
 public:
  Telemetry();
  virtual ~Telemetry();

  Telemetry(const Telemetry& from);

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Telemetry& default_instance();

  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Telemetry* other);
  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Telemetry* New() const PROTOBUF_FINAL { return New(NULL); }

  Telemetry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Telemetry& from);
  void MergeFrom(const Telemetry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Telemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .robot.Pose pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  const ::robot::Pose& pose() const;
  ::robot::Pose* mutable_pose();
  ::robot::Pose* release_pose();
  void set_allocated_pose(::robot::Pose* pose);

  // .robot.Velocity velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  const ::robot::Velocity& velocity() const;
  ::robot::Velocity* mutable_velocity();
  ::robot::Velocity* release_velocity();
  void set_allocated_velocity(::robot::Velocity* velocity);

  // @@protoc_insertion_point(class_scope:robot.Telemetry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::robot::Pose* pose_;
  ::robot::Velocity* velocity_;
  mutable int _cached_size_;
  friend struct protobuf_robot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubscribeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot.SubscribeRequest) */ {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SubscribeRequest* other);
  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SubscribeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubscribeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:robot.SubscribeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_robot_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose

// float x = 1;
inline void Pose::clear_x() {
  x_ = 0;
}
inline float Pose::x() const {
  // @@protoc_insertion_point(field_get:robot.Pose.x)
  return x_;
}
inline void Pose::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:robot.Pose.x)
}

// float y = 2;
inline void Pose::clear_y() {
  y_ = 0;
}
inline float Pose::y() const {
  // @@protoc_insertion_point(field_get:robot.Pose.y)
  return y_;
}
inline void Pose::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:robot.Pose.y)
}

// float heading = 3;
inline void Pose::clear_heading() {
  heading_ = 0;
}
inline float Pose::heading() const {
  // @@protoc_insertion_point(field_get:robot.Pose.heading)
  return heading_;
}
inline void Pose::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:robot.Pose.heading)
}

// -------------------------------------------------------------------

// Velocity

// float linear = 1;
inline void Velocity::clear_linear() {
  linear_ = 0;
}
inline float Velocity::linear() const {
  // @@protoc_insertion_point(field_get:robot.Velocity.linear)
  return linear_;
}
inline void Velocity::set_linear(float value) {
  
  linear_ = value;
  // @@protoc_insertion_point(field_set:robot.Velocity.linear)
}

// float angular = 2;
inline void Velocity::clear_angular() {
  angular_ = 0;
}
inline float Velocity::angular() const {
  // @@protoc_insertion_point(field_get:robot.Velocity.angular)
  return angular_;
}
inline void Velocity::set_angular(float value) {
  
  angular_ = value;
  // @@protoc_insertion_point(field_set:robot.Velocity.angular)
}

// -------------------------------------------------------------------

// Telemetry

// .robot.Pose pose = 1;
inline bool Telemetry::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void Telemetry::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::robot::Pose& Telemetry::pose() const {
  const ::robot::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:robot.Telemetry.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::robot::Pose*>(
      &::robot::_Pose_default_instance_);
}
inline ::robot::Pose* Telemetry::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::robot::Pose;
  }
  // @@protoc_insertion_point(field_mutable:robot.Telemetry.pose)
  return pose_;
}
inline ::robot::Pose* Telemetry::release_pose() {
  // @@protoc_insertion_point(field_release:robot.Telemetry.pose)
  
  ::robot::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Telemetry::set_allocated_pose(::robot::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot.Telemetry.pose)
}

// .robot.Velocity velocity = 2;
inline bool Telemetry::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline void Telemetry::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
}
inline const ::robot::Velocity& Telemetry::velocity() const {
  const ::robot::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:robot.Telemetry.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::robot::Velocity*>(
      &::robot::_Velocity_default_instance_);
}
inline ::robot::Velocity* Telemetry::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::robot::Velocity;
  }
  // @@protoc_insertion_point(field_mutable:robot.Telemetry.velocity)
  return velocity_;
}
inline ::robot::Velocity* Telemetry::release_velocity() {
  // @@protoc_insertion_point(field_release:robot.Telemetry.velocity)
  
  ::robot::Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void Telemetry::set_allocated_velocity(::robot::Velocity* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot.Telemetry.velocity)
}

// -------------------------------------------------------------------

// SubscribeRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace robot

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_robot_2eproto__INCLUDED
